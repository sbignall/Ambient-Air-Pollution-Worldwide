<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20222.22.0624.2136                               -->
<workbook original-version='18.1' source-build='2022.2.0 (20222.22.0624.2136)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Concentrations of Fine Particulate Matter Data Cleaned.csv+ (Multiple Connections)' inline='true' name='federated.09xzw530qnphcf13mvdkp0xnsle9' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Concentrations of Fine Particulate Matter Data Cleaned' name='textscan.0ytcljj01xtamx1cuqkvx0xwb0vb'>
            <connection class='textscan' directory='C:/Users/sam_b/OneDrive/Documents/All Work/Data Analysis/Tableau/Github' filename='Concentrations of Fine Particulate Matter Data Cleaned.csv' password='' server='' />
          </named-connection>
          <named-connection caption='Urban Population Data Cleaned' name='textscan.0de359n0is77yc1ealsoo1d6cfcx'>
            <connection class='textscan' directory='C:/Users/sam_b/OneDrive/Documents/All Work/Data Analysis/Tableau/Github' filename='Urban Population Data Cleaned.csv' password='' server='' />
          </named-connection>
          <named-connection caption='GDP per Capita Data Cleaned' name='textscan.05bmx0z1cl8wpm10yrwme1tzvrh0'>
            <connection class='textscan' directory='C:/Users/sam_b/OneDrive/Documents/All Work/Data Analysis/Tableau/Github' filename='GDP per Capita Data Cleaned.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0ytcljj01xtamx1cuqkvx0xwb0vb' name='Concentrations of Fine Particulate Matter Data Cleaned.csv' table='[Concentrations of Fine Particulate Matter Data Cleaned#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='Location' ordinal='0' />
            <column datatype='string' name='Residence' ordinal='1' />
            <column datatype='real' name='Mean Measures' ordinal='2' />
            <column datatype='real' name='Low Measures' ordinal='3' />
            <column datatype='real' name='High Measures' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='textscan.0ytcljj01xtamx1cuqkvx0xwb0vb' name='Concentrations of Fine Particulate Matter Data Cleaned.csv' table='[Concentrations of Fine Particulate Matter Data Cleaned#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
              <column datatype='string' name='Location' ordinal='0' />
              <column datatype='string' name='Residence' ordinal='1' />
              <column datatype='real' name='Mean Measures' ordinal='2' />
              <column datatype='real' name='Low Measures' ordinal='3' />
              <column datatype='real' name='High Measures' ordinal='4' />
            </columns>
          </relation>
          <relation connection='textscan.05bmx0z1cl8wpm10yrwme1tzvrh0' name='GDP per Capita Data Cleaned.csv' table='[GDP per Capita Data Cleaned#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
              <column datatype='string' name='Country' ordinal='0' />
              <column datatype='integer' name='Year' ordinal='1' />
              <column datatype='real' name='GDP per capita' ordinal='2' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;£&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[GDP per Capita Data Cleaned.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;£&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Location]</local-name>
            <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Residence</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Residence]</local-name>
            <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv]</parent-name>
            <remote-alias>Residence</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mean Measures</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mean Measures]</local-name>
            <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv]</parent-name>
            <remote-alias>Mean Measures</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Low Measures</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Low Measures]</local-name>
            <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv]</parent-name>
            <remote-alias>Low Measures</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>High Measures</remote-name>
            <remote-type>5</remote-type>
            <local-name>[High Measures]</local-name>
            <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv]</parent-name>
            <remote-alias>High Measures</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[GDP per Capita Data Cleaned.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[GDP per Capita Data Cleaned.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP per capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP per capita]</local-name>
            <parent-name>[GDP per Capita Data Cleaned.csv]</parent-name>
            <remote-alias>GDP per capita</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='USA GDP per Capita' datatype='integer' name='[Calculation_759419540605530112]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='53015' />
      </column>
      <column caption='Country1' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='POM2.5 Concentration (μg / m3)' datatype='real' name='[Mean Measures]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Concentrations of Fine Particulate Matter Data Cleaned.csv' datatype='table' name='[__tableau_internal_object_id__].[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='GDP per Capita Data Cleaned.csv' datatype='table' name='[__tableau_internal_object_id__].[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]' role='measure' type='quantitative' />
      <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_GB' class='hyper' dbname='C:/Users/sam_b/OneDrive/Documents/My Tableau Repository/Data sources/Connections Hyper/Concentrations of Fine Particulate Matter Data Cleaned.csv+ (Multiple Connections).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='07/07/2022 05:00:06 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697' table='[Extract].[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
            <relation name='Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697' table='[Extract].[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]' type='table' />
            <relation name='GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB' table='[Extract].[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]' type='table' />
          </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
          <refresh>
            <refresh-event add-from-file-path='Concentrations of Fine Particulate Matter Data Cleaned.csv+ (Multiple Connections)' increment-value='%null%' refresh-type='create' rows-inserted='754' timestamp-start='2022-07-07 17:00:05.131' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Location]</local-name>
              <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</parent-name>
              <remote-alias>Location</remote-alias>
              <ordinal>0</ordinal>
              <family>Concentrations of Fine Particulate Matter Data Cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>194</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Residence</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Residence]</local-name>
              <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</parent-name>
              <remote-alias>Residence</remote-alias>
              <ordinal>1</ordinal>
              <family>Concentrations of Fine Particulate Matter Data Cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Mean Measures</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Mean Measures]</local-name>
              <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</parent-name>
              <remote-alias>Mean Measures</remote-alias>
              <ordinal>2</ordinal>
              <family>Concentrations of Fine Particulate Matter Data Cleaned.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>529</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Low Measures</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Low Measures]</local-name>
              <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</parent-name>
              <remote-alias>Low Measures</remote-alias>
              <ordinal>3</ordinal>
              <family>Concentrations of Fine Particulate Matter Data Cleaned.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>528</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>High Measures</remote-name>
              <remote-type>5</remote-type>
              <local-name>[High Measures]</local-name>
              <parent-name>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</parent-name>
              <remote-alias>High Measures</remote-alias>
              <ordinal>4</ordinal>
              <family>Concentrations of Fine Particulate Matter Data Cleaned.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>542</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>5</ordinal>
              <family>GDP per Capita Data Cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>178</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>6</ordinal>
              <family>GDP per Capita Data Cleaned.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GDP per capita</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GDP per capita]</local-name>
              <parent-name>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</parent-name>
              <remote-alias>GDP per capita</remote-alias>
              <ordinal>7</ordinal>
              <family>GDP per Capita Data Cleaned.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>178</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Location:nk]' palette='superfishel_stone_10_0' type='palette'>
            <map to='#55ad89'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#6388b4'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#767676'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#8cc2ca'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#a9b5ae'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#baa094'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#bb7693'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#c3bc3f'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ef6f6a'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#ffae34'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:Location:nk]' palette=':filled' type='shape'>
            <map to=':filled/circle'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to=':filled/circle'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;United Kingdom of Great Britain and Northern Ireland&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>%null%</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Republic of Korea&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Venezuela (Bolivarian Republic of)&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;United Republic of Tanzania&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Democratic People&apos;s Republic of Korea&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Democratic Republic of the Congo&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Türkiye&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Côte d’Ivoire&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Micronesia (Federated States of)&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;The former Yugoslav Republic of Macedonia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Bolivia (Plurinational State of)&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Iran (Islamic Republic of)&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Republic of Moldova&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;United States of America&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Concentrations of Fine Particulate Matter Data Cleaned.csv' id='Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697'>
            <properties context=''>
              <relation connection='textscan.0ytcljj01xtamx1cuqkvx0xwb0vb' name='Concentrations of Fine Particulate Matter Data Cleaned.csv' table='[Concentrations of Fine Particulate Matter Data Cleaned#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
                  <column datatype='string' name='Location' ordinal='0' />
                  <column datatype='string' name='Residence' ordinal='1' />
                  <column datatype='real' name='Mean Measures' ordinal='2' />
                  <column datatype='real' name='Low Measures' ordinal='3' />
                  <column datatype='real' name='High Measures' ordinal='4' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697' table='[Extract].[Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697]' type='table' />
            </properties>
          </object>
          <object caption='GDP per Capita Data Cleaned.csv' id='GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB'>
            <properties context=''>
              <relation connection='textscan.05bmx0z1cl8wpm10yrwme1tzvrh0' name='GDP per Capita Data Cleaned.csv' table='[GDP per Capita Data Cleaned#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
                  <column datatype='string' name='Country' ordinal='0' />
                  <column datatype='integer' name='Year' ordinal='1' />
                  <column datatype='real' name='GDP per capita' ordinal='2' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB' table='[Extract].[GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Location]' />
              <expression op='[Country]' />
            </expression>
            <first-end-point object-id='Concentrations of Fine Particulate Matter Data Cleaned.csv_54BF36272817470BAEB01741107E1697' />
            <second-end-point object-id='GDP per Capita Data Cleaned.csv_0F3498BCF6B8498987FEE248B0836BAB' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Global PM2.5 Concentrations'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='22'>WHO Global Air Quality Assessment</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Concentrations of Fine Particulate Matter Data Cleaned.csv+ (Multiple Connections)' name='federated.09xzw530qnphcf13mvdkp0xnsle9' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.09xzw530qnphcf13mvdkp0xnsle9'>
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='POM2.5 Concentration (μg / m3)' datatype='real' name='[Mean Measures]' role='measure' type='quantitative' />
            <column datatype='string' name='[Residence]' role='dimension' type='nominal' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[Residence]' derivation='None' name='[none:Residence:nk]' pivot='key' type='nominal' />
            <column-instance column='[Mean Measures]' derivation='Sum' name='[sum:Mean Measures:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]'>
            <groupfilter function='member' level='[none:Residence:nk]' member='&quot;All&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' min='0.0' num-steps='5' palette='tableau-map-temperatur' type='interpolated' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' value='PM2.5 Concentration (µg/m3 )'>
              <formatted-text>
                <run fontname='Benton Sans Book' fontsize='10'>PM2.5 Concentration (</run>
                <run fontcolor='#000000' fontname='Benton Sans Book' fontsize='10'>µg/m3 )</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' />
              <lod column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]' />
              <geometry column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.09xzw530qnphcf13mvdkp0xnsle9].[Latitude (generated)]</rows>
        <cols>[federated.09xzw530qnphcf13mvdkp0xnsle9].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{1287DDC0-810F-47F3-9740-4D74A8F941FA}' />
    </worksheet>
    <worksheet name='PM2.5 Concentration vs GDP per Capita'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='22'>Relationship between Air Quality and GDP per Capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Concentrations of Fine Particulate Matter Data Cleaned.csv+ (Multiple Connections)' name='federated.09xzw530qnphcf13mvdkp0xnsle9' />
          </datasources>
          <datasource-dependencies datasource='federated.09xzw530qnphcf13mvdkp0xnsle9'>
            <column datatype='real' name='[GDP per capita]' role='measure' type='quantitative' />
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='POM2.5 Concentration (μg / m3)' datatype='real' name='[Mean Measures]' role='measure' type='quantitative' />
            <column datatype='string' name='[Residence]' role='dimension' type='nominal' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[Residence]' derivation='None' name='[none:Residence:nk]' pivot='key' type='nominal' />
            <column-instance column='[GDP per capita]' derivation='Sum' name='[sum:GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Mean Measures]' derivation='Sum' name='[sum:Mean Measures:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Mean Measures])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Location:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Location:nk]' member='%null%' />
                    <groupfilter function='member' level='[none:Location:nk]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]'>
            <groupfilter function='member' level='[none:Residence:nk]' member='&quot;All&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' included-values='non-null' />
          <slices>
            <column>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</column>
            <column>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</column>
            <column>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]' field-type='quantitative' major-origin='1000.0' major-spacing='10.0' max='165515.50548412488' min='1000.0' range-type='fixed' scale='log' scope='rows' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' field-type='quantitative' scope='cols' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline1' value='#00000000' />
            <format attr='fill-below' id='refline1' value='#00000000' />
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#f1ce63' />
            <format attr='background-color' id='refline0' value='#ffffff' />
            <format attr='font-size' id='refline0' value='18' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]' />
              <shape column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]' />
              <text column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]' />
              <color column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]' />
            </encodings>
            <reference-line axis-column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]' enable-instant-analytics='true' formula='constant' id='refline0' label='United States GDP per Capita' label-type='custom' scope='per-table' value='53015.0' value-column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]' z-order='2' />
            <reference-line axis-column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]' enable-instant-analytics='true' formula='constant' id='refline1' label='United States GDP per Capita' label-type='custom' scope='per-pane' value='53015.0' value-column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]' z-order='1' />
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='11' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='2' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1927' />
                <format attr='maxwidth' value='1927' />
                <format attr='minheight' value='1200' />
                <format attr='maxheight' value='1200' />
                <format attr='aspect' value='0' />
                <format attr='minwidth' value='1375' />
                <format attr='maxwidth' value='1375' />
                <format attr='minheight' value='1200' />
                <format attr='maxheight' value='1200' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</rows>
        <cols>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</cols>
        <mark-labels>
          <mark-label id='0'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Cameroon&quot;</value>
                <value>2828.0</value>
                <value>65.420000000000002</value>
                <value>&quot;[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.761905' y='16' />
          </mark-label>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Chad&quot;</value>
                <value>2189.0</value>
                <value>64.269999999999996</value>
                <value>&quot;[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <label-position x='2' y='-21' />
          </mark-label>
          <mark-label id='2'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Mali&quot;</value>
                <value>1594.0</value>
                <value>63.640000000000001</value>
                <value>&quot;[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <label-position x='-41' y='0.333333' />
          </mark-label>
          <mark-label id='3'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Niger&quot;</value>
                <value>925.0</value>
                <value>93.180000000000007</value>
                <value>&quot;[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.15' y='22' />
          </mark-label>
          <mark-label id='4'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Nepal&quot;</value>
                <value>2435.0</value>
                <value>81.569999999999993</value>
                <value>&quot;[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.47619' y='22' />
          </mark-label>
          <mark-label id='5'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]</field>
                  <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;India&quot;</value>
                <value>6125.0</value>
                <value>68.760000000000005</value>
                <value>&quot;[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:GDP per capita:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.5' y='25' />
          </mark-label>
        </mark-labels>
      </table>
      <simple-id uuid='{F6C4B2C4-504F-441C-8C73-E2A4F5DA7251}' />
    </worksheet>
    <worksheet name='Top 10 Countries'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='22'>Countries with the Highest PM2.5 Concentration</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Concentrations of Fine Particulate Matter Data Cleaned.csv+ (Multiple Connections)' name='federated.09xzw530qnphcf13mvdkp0xnsle9' />
          </datasources>
          <datasource-dependencies datasource='federated.09xzw530qnphcf13mvdkp0xnsle9'>
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='POM2.5 Concentration (μg / m3)' datatype='real' name='[Mean Measures]' role='measure' type='quantitative' />
            <column datatype='string' name='[Residence]' role='dimension' type='nominal' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[Residence]' derivation='None' name='[none:Residence:nk]' pivot='key' type='nominal' />
            <column-instance column='[Mean Measures]' derivation='Sum' name='[sum:Mean Measures:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Mean Measures])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Location:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Bahamas&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Bolivia (Plurinational State of)&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Congo&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Cook Islands&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Côte d’Ivoire&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Czechia&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Democratic People&apos;s Republic of Korea&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Democratic Republic of the Congo&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Egypt&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Eritrea&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Gambia&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Iran (Islamic Republic of)&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Kyrgyzstan&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Lao People&apos;s Democratic Republic&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Micronesia (Federated States of)&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Niue&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Republic of Korea&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Republic of Moldova&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Saint Kitts and Nevis&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Saint Lucia&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Slovakia&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;The former Yugoslav Republic of Macedonia&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Türkiye&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;United Kingdom of Great Britain and Northern Ireland&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;United Republic of Tanzania&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;United States of America&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Venezuela (Bolivarian Republic of)&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Viet Nam&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='&quot;Yemen&quot;' />
                    <groupfilter function='member' level='[none:Location:nk]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;All&quot;</bucket>
              <bucket>&quot;Rural&quot;</bucket>
              <bucket>&quot;Urban&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' shelf='columns'>
              <sort-filter-info>
                <sort-filter level-name='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]' member-value='&quot;All&quot;' />
              </sort-filter-info>
            </shelf-sort-v2>
          </shelf-sorts>
          <slices>
            <column>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]</rows>
        <cols>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</cols>
      </table>
      <simple-id uuid='{D01AC6D9-D15C-474A-9932-CB2EE63A8D9C}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Air Quality (POM2.5 Conc) Globally'>
      <style />
      <size maxheight='1600' maxwidth='2800' minheight='1600' minwidth='2800' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='99000' id='12' param='horz' type-v2='layout-flow' w='99428' x='286' y='500'>
            <zone h='99000' id='7' param='horz' type-v2='layout-flow' w='99428' x='286' y='500'>
              <zone h='99000' id='5' type-v2='layout-basic' w='54749' x='286' y='500'>
                <zone h='99000' id='3' name='Global PM2.5 Concentrations' w='54749' x='286' y='500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='1251' h='99000' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='44679' x='55035' y='500'>
                <zone fixed-size='384' h='24500' id='9' is-fixed='true' name='Top 10 Countries' w='44679' x='55035' y='500'>
                  <layout-cache cell-count-w='10' non-cell-size-w='81' type-h='cell' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='74500' id='10' name='PM2.5 Concentration vs GDP per Capita' w='44679' x='55035' y='25000'>
                  <layout-cache has-max-size-h='true' has-max-size-w='true' maxheight='1347' maxwidth='2043' minheight='1347' minwidth='2043' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
            <format attr='background-color' value='#f5ead7' />
          </zone-style>
        </zone>
        <zone h='7813' id='8' name='Global PM2.5 Concentrations' pane-specification-id='0' param='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' type-v2='color' w='15679' x='37929' y='69438' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='950' minheight='950' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='28' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='99000' id='27' param='vert' type-v2='layout-flow' w='99428' x='286' y='500'>
                <zone fixed-size='280' h='99000' id='3' is-fixed='true' name='Global PM2.5 Concentrations' w='54749' x='286' y='500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7813' id='8' name='Global PM2.5 Concentrations' pane-specification-id='0' param='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' type-v2='color' w='15679' x='37929' y='69438'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='24500' id='9' is-fixed='true' name='Top 10 Countries' w='44679' x='55035' y='500'>
                  <layout-cache cell-count-w='10' non-cell-size-w='81' type-h='cell' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='74500' id='10' is-fixed='true' name='PM2.5 Concentration vs GDP per Capita' w='44679' x='55035' y='25000'>
                  <layout-cache has-max-size-h='true' has-max-size-w='true' maxheight='1347' maxwidth='2043' minheight='1347' minwidth='2043' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
                <format attr='background-color' value='#f5ead7' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{2EA2C6DB-474F-4299-8ED5-93D5B158FD56}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='dashboard' maximized='true' name='Air Quality (POM2.5 Conc) Globally'>
      <viewpoints>
        <viewpoint name='Global PM2.5 Concentrations'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='PM2.5 Concentration vs GDP per Capita'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Top 10 Countries'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{EF970457-D2CA-4F20-B3B5-DD6F8D725A85}' />
    </window>
    <window class='worksheet' name='Global PM2.5 Concentrations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.09xzw530qnphcf13mvdkp0xnsle9].[sum:Mean Measures:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C654B05F-E48A-41D9-99B5-632A7E1A4095}' />
    </window>
    <window class='worksheet' name='Top 10 Countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
            <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DD092A51-B15E-439A-8CD4-6F7BFBBDAC35}' />
    </window>
    <window class='worksheet' name='PM2.5 Concentration vs GDP per Capita'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]' type='shape' />
            <card pane-specification-id='1' param='[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]&#10;[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[:Measure Names]</field>
            <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Location:nk]</field>
            <field>[federated.09xzw530qnphcf13mvdkp0xnsle9].[none:Residence:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A709E189-5560-4784-A605-C33B42858A03}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Air Quality (POM2.5 Conc) Globally' width='192'>
      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
      UsAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Global PM2.5 Concentrations' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='PM2.5 Concentration vs GDP per Capita' width='192'>
      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
    </thumbnail>
    <thumbnail height='139' name='Top 10 Countries' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
